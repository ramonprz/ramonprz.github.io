---
import { getCollection } from 'astro:content';

const lessons = await getCollection('lessons');

// Group lessons by section and subsection
const groupedLessons = lessons.reduce((acc, lesson) => {
  const { section, subsection } = lesson.data;
  if (!acc[section]) {
    acc[section] = {};
  }
  if (!acc[section][subsection]) {
    acc[section][subsection] = [];
  }
  acc[section][subsection].push(lesson);
  return acc;
}, {});

// Sort lessons within each subsection by order
Object.values(groupedLessons).forEach(section => {
  Object.values(section).forEach(subsection => {
    subsection.sort((a, b) => a.data.order - b.data.order);
  });
});

interface Props {
  activeSection?: string;
  activeSubsection?: string;
}

const { activeSection, activeSubsection } = Astro.props;
---

<nav class="accordion-nav">
  {Object.entries(groupedLessons).map(([sectionName, section]) => (
    <div class:list={['section', { 'active': sectionName === activeSection }]}>
      <button class="section-header" data-section={sectionName}>
        <span class="section-title">{sectionName}</span>
        <svg 
          class="icon" 
          width="20" 
          height="20" 
          viewBox="0 0 20 20" 
          fill="none" 
          stroke="currentColor"
        >
          <path d="M5 7.5L10 12.5L15 7.5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>

      <div class="subsections">
        {Object.entries(section).map(([subsectionName, lessons]) => (
          <div class:list={['subsection', { 'active': subsectionName === activeSubsection }]}>
            <button class="subsection-header" data-subsection={subsectionName}>
              <span class="subsection-title">{subsectionName}</span>
              <span class="lesson-count">{lessons.length}</span>
            </button>

            <div class="lessons">
              {lessons.map((lesson) => (
                <a 
                  href={`/learn/${lesson.slug}`}
                  class:list={['lesson-link', { 'overview': lesson.data.isOverview }]}
                >
                  {lesson.data.isOverview ? 'üìö ' : 'üìù '}
                  {lesson.data.title}
                </a>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  ))}
</nav>

<style>
  .accordion-nav {
    background: rgba(var(--background-800), 0.7);
    backdrop-filter: blur(12px);
    border-radius: 16px;
    overflow: hidden;
  }

  .section-header {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: none;
    border: none;
    color: var(--text-50);
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .section-header:hover {
    background: rgba(var(--primary-400), 0.1);
  }

  .section-title {
    font-weight: 600;
    font-size: 1.1rem;
  }

  .icon {
    transition: transform 0.3s ease;
  }

  .section.active .icon {
    transform: rotate(-180deg);
  }

  .subsections {
    display: none;
    padding-left: 1rem;
  }

  .section.active .subsections {
    display: block;
    animation: slideDown 0.3s ease-out;
  }

  .subsection-header {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    background: none;
    border: none;
    color: var(--text-300);
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .subsection-header:hover {
    background: rgba(var(--primary-400), 0.05);
    color: var(--text-50);
  }

  .lesson-count {
    padding: 0.25rem 0.5rem;
    background: rgba(var(--primary-400), 0.1);
    border-radius: 999px;
    font-size: 0.75rem;
  }

  .lessons {
    display: none;
    padding-left: 1rem;
  }

  .subsection.active .lessons {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    animation: slideDown 0.3s ease-out;
  }

  .lesson-link {
    display: block;
    padding: 0.5rem 1rem;
    color: var(--text-300);
    text-decoration: none;
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .lesson-link:hover {
    background: rgba(var(--primary-400), 0.05);
    color: var(--text-50);
  }

  .lesson-link.overview {
    font-weight: 600;
    color: var(--primary-400);
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  function initializeAccordion() {
    // Handle section toggles
    document.querySelectorAll('.section-header').forEach(header => {
      header.addEventListener('click', () => {
        const section = header.parentElement;
        section.classList.toggle('active');
      });
    });

    // Handle subsection toggles
    document.querySelectorAll('.subsection-header').forEach(header => {
      header.addEventListener('click', () => {
        const subsection = header.parentElement;
        subsection.classList.toggle('active');
      });
    });

    // Open section and subsection based on current URL
    const path = window.location.pathname;
    const pathParts = path.split('/');
    if (pathParts.length > 2) {
      const section = document.querySelector(`[data-section="${pathParts[2]}"]`);
      if (section) {
        section.parentElement.classList.add('active');
        if (pathParts[3]) {
          const subsection = section.parentElement.querySelector(`[data-subsection="${pathParts[3]}"]`);
          if (subsection) {
            subsection.parentElement.classList.add('active');
          }
        }
      }
    }
  }

  // Initialize when the DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAccordion);
  } else {
    initializeAccordion();
  }
</script>
