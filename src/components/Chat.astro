---
import { Icon } from 'astro-icon/components';
const suggestedQuestions = [
  { text: "Tell me about your background", action: "background" },
  { text: "What projects have you worked on?", action: "projects" },
  { text: "What technologies do you use?", action: "tech" },
  { text: "How can we collaborate?", action: "contact" },
];
---

<div class="w-full max-w-3xl mx-auto mb-16">
  <div class="flex items-center justify-between mb-4">
    <h2 class="text-4xl font-bold text-text-100">Ask way!</h2>
    <button
      id="clear-chat-btn"
      class="p-2 rounded-full hover:bg-background-900/20 transition-colors duration-300 group"
      title="Clear chat history"
    >
      <Icon
        name="ri:refresh-line"
        class="w-6 h-6 text-text-400 group-hover:text-text-100 transition-colors duration-300"
      />
    </button>
  </div>

  <div class="bg-background-900/50 rounded-xl overflow-hidden backdrop-blur-sm relative">
    <!-- Gradient Border -->
    <div class="absolute inset-0 p-[1.5px] rounded-xl bg-gradient-to-r from-purple-500/30 via-primary-500/40 to-accent-500/20">
      <div class="absolute inset-0 rounded-xl bg-background-900/25 backdrop-blur-sm"></div>
    </div>

    <!-- Content -->
    <div class="relative">
      <!-- Chat Messages -->
      <div class="h-[400px] overflow-y-auto p-6" id="chat-messages">
        <div class="flex justify-start mb-4">
          <div class="bg-primary-900/20 backdrop-blur-sm rounded-bl-none text-text-100 max-w-[80%] p-4 rounded-2xl shadow-sm">
            <p class="whitespace-pre-wrap font-patrick">ðŸ‘‹ Hey there! I'm rAImond - a digital version of the real(?) Ramon. I know all about his work, projects, and experiences so ask away!</p>
          </div>
        </div>
      </div>

      <!-- Input Area -->
      <div class="border-t border-primary-500/20 bg-background-900/50">
        <!-- Suggested Questions -->
        <div class="px-4 py-3 flex gap-2 overflow-x-auto suggested-questions">
          {suggestedQuestions.map((q) => (
            <button
              class="px-4 py-2 rounded-full bg-primary-500/20 hover:bg-primary-500/30 
                     text-base text-text-100 whitespace-nowrap transition-colors duration-300
                     border border-primary-500/30 font-patrick
                     hover:border-primary-500/50 hover:text-text-50"
              data-action={q.action}
            >
              {q.text}
            </button>
          ))}
        </div>

        <!-- Input Form -->
        <div class="p-4 pt-2">
          <form id="chat-form" class="flex gap-2">
            <div class="flex-1 relative">
              <input
                type="text"
                id="user-input"
                placeholder="Ask me anything..."
                class="w-full px-4 py-3 rounded-xl bg-background-900/90 border border-primary-500/30 
                       focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500/20 
                       transition-all duration-300 pr-12 text-black placeholder-text-400
                       text-base font-patrick"
                required
              />
              <button
                type="button"
                class="absolute right-3 top-1/2 -translate-y-1/2 text-text-400 hover:text-text-100 
                       transition-colors duration-300"
                id="attach-button"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48"/>
                </svg>
              </button>
            </div>
            <button
              type="submit"
              class="px-6 py-3 rounded-xl bg-primary-500 hover:bg-primary-600 
                     transition-colors duration-300 text-white font-medium
                     flex items-center gap-2 min-w-[120px] justify-center"
            >
              <span>Send</span>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="22" y1="2" x2="11" y2="13"></line>
                <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
              </svg>
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let getChatResponseStream;
  
  // Dynamically import the chat API
  try {
    const module = await import('../utils/chatApi');
    getChatResponseStream = module.getChatResponseStream;
  } catch (error) {
    console.error('Failed to load chat API:', error);
  }

  const chatMessages = document.getElementById('chat-messages');
  const chatForm = document.getElementById('chat-form');
  const userInput = document.getElementById('user-input') as HTMLInputElement;

  let messageCounter = 0;

  // Move this outside of DOMContentLoaded
  function loadSavedMessages() {
    if (chatMessages) {
      const savedMessages = localStorage.getItem('chatHistory');
      if (savedMessages) {
        chatMessages.innerHTML = savedMessages;
        chatMessages.scrollTop = chatMessages.scrollHeight;
      } else {
        // Set initial message if no history exists
        chatMessages.innerHTML = `
          <div class="flex justify-start mb-4">
            <div class="bg-primary-900/20 backdrop-blur-sm rounded-bl-none text-text-100 max-w-[80%] p-4 rounded-2xl shadow-sm">
              <p class="whitespace-pre-wrap font-patrick">ðŸ‘‹ Hey there! I'm rAImond - a digital version of the real(?) Ramon. I know all about his work, projects, and experiences so ask away!</p>
            </div>
          </div>
        `;
      }
    }
  }

  // Call it immediately when script loads
  loadSavedMessages();

  // Also call it when the DOM is fully loaded (backup)
  document.addEventListener('DOMContentLoaded', loadSavedMessages);

  // Add visibility change listener to reload messages when tab becomes visible
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      loadSavedMessages();
    }
  });

  chatForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!getChatResponseStream) {
      addMessage('assistant', 'Sorry, the chat system failed to initialize. Please refresh the page.');
      return;
    }

    const message = userInput.value.trim();
    if (!message) return;

    // Generate unique IDs for both messages
    const userMessageId = `user-${Date.now()}-${messageCounter++}`;
    const assistantMessageId = `assistant-${Date.now()}-${messageCounter++}`;

    // Add user message
    addMessage('user', message, userMessageId);
    userInput.value = '';

    try {
      // Add empty assistant message
      addMessage('assistant', '', assistantMessageId);
      
      // Get streaming response
      let fullResponse = '';
      const stream = await getChatResponseStream(message);
      
      for await (const chunk of stream) {
        if (chunk) {
          fullResponse += chunk;
          updateMessage(assistantMessageId, fullResponse);
          
          // Scroll to bottom
          chatMessages?.scrollTo({
            top: chatMessages.scrollHeight,
            behavior: 'smooth'
          });
        }
      }
    } catch (error) {
      console.error('Error:', error);
      // Show error message to user
      updateMessage(
        assistantMessageId, 
        'Sorry, I encountered an error. Please try again later. ' + 
        (error instanceof Error ? error.message : 'Unknown error')
      );
    }
  });

  function addMessage(role: 'assistant' | 'user', content: string, id?: string) {
    const messageId = id || `${role}-${Date.now()}-${messageCounter++}`;
    const messageHtml = `
      <div id="${messageId}" class="flex ${role === 'user' ? 'justify-end' : 'justify-start'} mb-4">
        <div class="${
          role === 'user' 
            ? 'bg-primary-500 text-white rounded-br-none'
            : 'bg-primary-900/20 backdrop-blur-sm rounded-bl-none text-text-100'
        } max-w-[80%] p-4 rounded-2xl shadow-sm">
          <p class="message-content whitespace-pre-wrap font-patrick">${content}</p>
        </div>
      </div>
    `;
    
    if (chatMessages) {
      chatMessages.insertAdjacentHTML('beforeend', messageHtml);
      chatMessages.scrollTop = chatMessages.scrollHeight;
      // Save to localStorage after adding new message
      localStorage.setItem('chatHistory', chatMessages.innerHTML);
    }
  }

  function updateMessage(id: string, content: string) {
    const messageElement = document.getElementById(id);
    if (messageElement) {
      const contentElement = messageElement.querySelector('.message-content');
      if (contentElement) {
        contentElement.textContent = content;
        // Save to localStorage after updating message
        localStorage.setItem('chatHistory', chatMessages.innerHTML);
      }
    }
  }

  // Add a clear chat button if you want
  function clearChat() {
    if (chatMessages) {
      chatMessages.innerHTML = `
        <div class="flex justify-start mb-4">
          <div class="bg-primary-900/20 backdrop-blur-sm rounded-bl-none text-text-100 max-w-[80%] p-4 rounded-2xl shadow-sm">
            <p class="whitespace-pre-wrap font-patrick">ðŸ‘‹ Hey there! I'm rAImond - a digital version of the real(?) Ramon. I know all about his work, projects, and experiences so ask away!</p>
          </div>
        </div>
      `;
      localStorage.removeItem('chatHistory');
    }
  }

  // Add event listener for clear chat button
  document.getElementById('clear-chat-btn')?.addEventListener('click', clearChat);

  // Suggested questions functionality
  document.querySelectorAll('[data-action]').forEach(button => {
    button.addEventListener('click', () => {
      const input = document.getElementById('user-input') as HTMLInputElement;
      const message = (button as HTMLElement).innerText;
      
      // Set the input value and focus the input
      input.value = message;
      input.focus();
      
      // Move cursor to end of input
      const length = input.value.length;
      input.setSelectionRange(length, length);
    });
  });
</script>

<style>
  .suggested-questions::-webkit-scrollbar {
    height: 0px;
  }

  #chat-messages::-webkit-scrollbar {
    width: 8px;
  }

  #chat-messages::-webkit-scrollbar-track {
    background: transparent;
  }

  #chat-messages::-webkit-scrollbar-thumb {
    background-color: var(--primary-500);
    opacity: 0.2;
    border-radius: 20px;
  }

  #chat-messages {
    background: rgba(30, 20, 40, 0.5);
  }

  .bg-gradient-to-r {
    animation: borderGlow 4s ease-in-out infinite;
    background: linear-gradient(
      45deg, 
      rgba(139, 92, 246, 0.3),
      rgba(67, 56, 202, 0.3)
    );
  }
</style> 