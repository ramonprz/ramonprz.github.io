---
import { getCollection } from 'astro:content';

// Fetch items from all collections
const posts = await getCollection('posts');
const projects = await getCollection('projects');
const lists = await getCollection('lists');

// Combine and sort all items by date
const allItems = [
  ...posts.map(post => ({
    type: 'post',
    title: post.data.title,
    description: post.data.description,
    date: post.data.pubDate,
    link: `/read/${post.slug}`,
    icon: '📝'
  })),
  ...projects.map(project => ({
    type: 'project',
    title: project.data.title,
    description: project.data.description,
    date: new Date(), // You might want to add dates to projects
    link: `/projects/${project.slug}`,
    icon: '🚀'
  })),
  ...lists.map(list => ({
    type: 'list',
    title: list.data.title,
    description: list.data.description,
    date: new Date(), // You might want to add dates to lists
    link: `/lists/${list.id}`,
    icon: '📋'
  }))
];

// Get the two most recent items from each type
const recentPosts = posts
  .sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime())
  .slice(0, 2)
  .map(post => ({
    type: 'post',
    title: post.data.title,
    description: post.data.description,
    date: post.data.pubDate,
    link: `/read/${post.slug}`,
    icon: '📝'
  }));

const recentProjects = projects
  .slice(0, 2)
  .map(project => ({
    type: 'project',
    title: project.data.title,
    description: project.data.description,
    date: new Date(),
    link: `/projects/${project.slug}`,
    icon: '🚀'
  }));

const recentLists = lists
  .slice(0, 2)
  .map(list => ({
    type: 'list',
    title: list.data.title,
    description: list.data.description,
    date: new Date(),
    link: `/lists/${list.id}`,
    icon: '📋'
  }));

// Combine all recent items
const recentItems = [...recentPosts, ...recentProjects, ...recentLists];

// Generate random positions for floating state
const floatingItems = recentItems.map(item => ({
  ...item,
  x: Math.random() * 60 + 20, // 20-80%
  y: Math.random() * 60 + 20, // 20-80%
  rotation: Math.random() * 20 - 10,
}));
---

<div class="background-canvas">
  {floatingItems.map((item, index) => (
    <a
      href={item.link}
      class="canvas-element"
      data-index={index}
      data-type={item.type}
      style={`
        --index: ${index};
        left: ${item.x}vw;
        top: ${item.y}vh;
        transform: rotate(${item.rotation}deg);
      `}
    >
      <div class="item-card">
        <span class="icon">{item.icon}</span>
        <h3 class="text-lg font-semibold mb-2">{item.title}</h3>
        <p class="text-sm">{item.description}</p>
      </div>
    </a>
  ))}
</div>

<button id="organizeBtn" class="organize-btn">
  Organize Items
</button>

<style>
  .background-canvas {
    position: fixed;
    inset: 0;
    z-index: 20;
    pointer-events: none;
  }

  .canvas-element {
    position: absolute;
    transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    text-decoration: none;
    cursor: pointer;
    pointer-events: auto;
    z-index: 25;
    animation: float 25s cubic-bezier(0.45, 0.05, 0.55, 0.95) infinite;
    animation-delay: calc(var(--index) * -5s);
    will-change: transform;
  }

  .item-card {
    background: rgba(var(--background-800), 0.9);
    border: 1px solid var(--primary-400);
    border-radius: 12px;
    padding: 1rem;
    width: 280px;
    backdrop-filter: blur(8px);
    color: var(--text-400);
    opacity: 0.8;
    transition: all 0.3s ease;
  }

  .item-card:hover {
    opacity: 1;
    transform: scale(1.05);
    border-color: var(--accent-400);
    z-index: 30;
  }

  .icon {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    display: block;
  }

  .organize-btn {
    position: fixed;
    top: 2rem;
    right: 2rem;
    z-index: 35;
    background: var(--primary-500);
    color: var(--text-100);
    padding: 0.75rem 1.5rem;
    border-radius: 9999px;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    pointer-events: auto;
  }

  .organize-btn:hover {
    background: var(--primary-400);
    transform: scale(1.05);
  }

  @keyframes float {
    0% {
      transform: translate(0, 0) rotate(var(--rotation, 0deg));
    }
    20% {
      transform: translate(var(--x1, 200px), var(--y1, -150px)) rotate(calc(var(--rotation, 0deg) + 5deg));
    }
    40% {
      transform: translate(var(--x2, -180px), var(--y2, 200px)) rotate(calc(var(--rotation, 0deg) - 3deg));
    }
    60% {
      transform: translate(var(--x3, -220px), var(--y3, -180px)) rotate(calc(var(--rotation, 0deg) + 4deg));
    }
    80% {
      transform: translate(var(--x4, 180px), var(--y4, 150px)) rotate(calc(var(--rotation, 0deg) - 6deg));
    }
    100% {
      transform: translate(0, 0) rotate(var(--rotation, 0deg));
    }
  }
</style>

<script>
  let isOrganized = false;
  const canvas = document.querySelector('.background-canvas');
  const elements = document.querySelectorAll('.canvas-element');
  const organizeBtn = document.getElementById('organizeBtn');

  // Set initial random rotations and positions
  elements.forEach((element) => {
    const rotation = Math.random() * 30 - 15;
    element.style.setProperty('--rotation', `${rotation}deg`);
    
    // Add random translation values for each element with larger ranges
    element.style.setProperty('--x1', `${Math.random() * 400 - 200}px`);
    element.style.setProperty('--y1', `${Math.random() * 400 - 200}px`);
    element.style.setProperty('--x2', `${Math.random() * 400 - 200}px`);
    element.style.setProperty('--y2', `${Math.random() * 400 - 200}px`);
    element.style.setProperty('--x3', `${Math.random() * 400 - 200}px`);
    element.style.setProperty('--y3', `${Math.random() * 400 - 200}px`);
    element.style.setProperty('--x4', `${Math.random() * 400 - 200}px`);
    element.style.setProperty('--y4', `${Math.random() * 400 - 200}px`);
    
    if (!isOrganized) {
      const x = Math.random() * 60 + 20; // 20-80vw range
      const y = Math.random() * 60 + 20; // 20-80vh range
      element.style.left = `${x}vw`;
      element.style.top = `${y}vh`;
    }
  });

  organizeBtn?.addEventListener('click', () => {
    isOrganized = !isOrganized;
    
    if (isOrganized) {
      // Stop floating animations and organize
      elements.forEach((element, index) => {
        element.style.animation = 'none';
        const verticalSpacing = 120;
        const startingOffset = 200;
        element.style.top = `${startingOffset + (index * verticalSpacing)}px`;
        element.style.left = '50%';
        element.style.transform = 'translateX(-50%) rotate(0deg)';
      });
      organizeBtn.textContent = 'Scatter Items';
    } else {
      // Restore floating animations and scatter
      elements.forEach((element) => {
        const x = Math.random() * 60 + 20;
        const y = Math.random() * 40 + 30;
        const rotation = Math.random() * 20 - 10;
        element.style.setProperty('--rotation', `${rotation}deg`);
        
        element.style.animation = 'float 20s ease-in-out infinite';
        element.style.left = `${x}vw`;
        element.style.top = `${y}vh`;
        element.style.transform = `rotate(${rotation}deg)`;
      });
      organizeBtn.textContent = 'Organize Items';
    }
  });
</script>