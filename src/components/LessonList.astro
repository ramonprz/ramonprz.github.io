---
import { getCollection } from 'astro:content';

const lessons = await getCollection('learn');

// Sort by section, subsection, and order
const sortedLessons = lessons.sort((a, b) => {
  // First sort by section
  if (a.data.section !== b.data.section) {
    return a.data.section.localeCompare(b.data.section);
  }
  // Then by subsection
  if (a.data.subsection !== b.data.subsection) {
    return a.data.subsection.localeCompare(b.data.subsection);
  }
  // Finally by order
  return a.data.order - b.data.order;
});

// Group lessons by section and subsection
const groupedLessons = sortedLessons.reduce((acc, lesson) => {
  const { section, subsection } = lesson.data;
  if (!acc[section]) {
    acc[section] = {};
  }
  if (!acc[section][subsection]) {
    acc[section][subsection] = [];
  }
  acc[section][subsection].push(lesson);
  return acc;
}, {});
---

<div class="lessons-container">
  {Object.entries(groupedLessons).map(([section, subsections]) => (
    <div class="section">
      {Object.entries(subsections).map(([subsection, lessons]) => (
        <div class="subsection">
          {lessons.map(lesson => {
            const isOverview = lesson.data.isOverview;
            return (
              <div 
                class:list={[
                  'lesson-card',
                  { 'lesson-overview': isOverview }
                ]}
                data-tags={lesson.data.topics.join(',')}
                data-section={section}
                data-subsection={subsection}
              >
                <div class="lesson-header">
                  {isOverview ? (
                    <h2 class="overview-title">
                      <a href={`/learn/${lesson.slug}`}>{lesson.data.title}</a>
                    </h2>
                  ) : (
                    <h3 class="lesson-title">
                      <a href={`/learn/${lesson.slug}`}>{lesson.data.title}</a>
                    </h3>
                  )}
                  <div class="lesson-meta">
                    <span class="duration">{lesson.data.duration}</span>
                    <span class="difficulty" data-difficulty={lesson.data.difficulty}>
                      {lesson.data.difficulty}
                    </span>
                  </div>
                </div>

                <p class="description">{lesson.data.description}</p>

                <div class="lesson-footer">
                  <div class="topics">
                    {lesson.data.topics.map(topic => (
                      <span class="topic-tag" data-topic={topic}>{topic}</span>
                    ))}
                  </div>
                  
                  {isOverview && (
                    <div class="lesson-count">
                      {lessons.length - 1} lessons in this section
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      ))}
    </div>
  ))}
</div>

<style>
  .lessons-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .lesson-card {
    padding: 1rem;
    border: 1px solid rgba(var(--text-400), 0.1);
    border-radius: 0.5rem;
  }

  .lesson-overview {
    border-left: 4px solid var(--primary-400);
    background: rgba(var(--primary-400), 0.05);
  }

  .lesson-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.5rem;
  }

  .overview-title {
    font-size: 1.5rem;
    font-weight: 600;
  }

  .lesson-title {
    font-size: 1.25rem;
    font-weight: 500;
  }

  .lesson-title a,
  .overview-title a {
    color: inherit;
    text-decoration: none;
  }

  .lesson-title a:hover,
  .overview-title a:hover {
    color: var(--primary-400);
  }

  .lesson-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.875rem;
  }

  .duration {
    color: var(--text-300);
  }

  .difficulty {
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
  }

  .difficulty[data-difficulty="beginner"] { 
    background: rgba(var(--primary-400), 0.1);
    color: var(--primary-400);
  }

  .difficulty[data-difficulty="intermediate"] {
    background: rgba(var(--accent-400), 0.1);
    color: var(--accent-400);
  }

  .difficulty[data-difficulty="advanced"] {
    background: rgba(var(--secondary-400), 0.1);
    color: var(--secondary-400);
  }

  .description {
    color: var(--text-300);
    margin-bottom: 1rem;
    line-height: 1.5;
  }

  .lesson-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .topics {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .topic-tag {
    padding: 0.25rem 0.5rem;
    background: rgba(var(--text-400), 0.1);
    border-radius: 9999px;
    font-size: 0.75rem;
    color: var(--text-300);
  }

  .lesson-count {
    font-size: 0.875rem;
    color: var(--text-300);
  }

  .hidden {
    display: none;
  }
</style>
