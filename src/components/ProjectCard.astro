---
interface Props {
  project: {
    title: string;
    description: string;
    tags?: string[];
    image?: string;
    status?: 'completed' | 'in-progress';
    type?: string;
  };
}

const { project } = Astro.props;
---

<div class="relative h-full group overflow-hidden">
  {/* Background Image with Gradient Overlay */}
  {project.image && (
    <div class="absolute -inset-4 z-0">
      <img 
        src={project.image} 
        alt={project.title}
        class="w-full h-full object-cover blur-[2px]"
      />
      <div class="absolute inset-0 bg-gradient-to-t from-background-950/90 to-background-950/50"></div>
    </div>
  )}

  {/* Content */}
  <div class="relative z-10 h-full flex flex-col justify-between">
    {/* Status Badge */}
    <div class="flex items-center gap-2">
      <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
        ${project.status === 'completed' ? 'text-green-400' : 'text-yellow-400'}`}>
        <span class="relative flex h-2 w-2 mr-1">
          <span class={`animate-ping absolute inline-flex h-full w-full rounded-full opacity-75
            ${project.status === 'completed' ? 'bg-green-400' : 'bg-yellow-400'}`}></span>
          <span class={`relative inline-flex rounded-full h-2 w-2
            ${project.status === 'completed' ? 'bg-green-400' : 'bg-yellow-400'}`}></span>
        </span>
        {project.status === 'completed' ? 'COMPLETED' : 'IN-PROGRESS'}
      </span>
    </div>

    {/* Title and Description */}
    <div>
      <h3 class="text-xl font-semibold mb-2">{project.title}</h3>
      <p class="text-sm text-text-300">{project.description}</p>
    </div>

    {/* Tags */}
    {project.tags && (
      <div class="flex flex-wrap gap-2 mt-4">
        {project.tags.map(tag => (
          <span class="px-2 py-1 text-xs rounded-full bg-green-400/10 text-green-400 border border-green-400/20">
            {tag}
          </span>
        ))}
      </div>
    )}
  </div>
</div>

<style>
  .object-cover {
    object-fit: cover;
  }
</style>
