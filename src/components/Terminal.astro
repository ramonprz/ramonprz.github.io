---
// Simpler command structure
const commands: Record<string, string[]> = {
  'help': [
    'Available commands:',
    'about        - Learn more about me',
    'skills       - View my technical skills',
    'projects     - See my featured projects',
    'contact      - Get my contact information',
    'clear        - Clear the terminal',
    'help         - Show this help message'
  ],
  'about': [
    'Hi! I\'m Ramon Perez ðŸ‘‹',
    'I\'m a developer and educator passionate about building tools',
    'that help people learn and grow in tech.',
    '',
    'Type "skills" to see what I work with!'
  ],
  'skills': [
    'ðŸ’» Technical Skills:',
    '- Python, JavaScript, TypeScript',
    '- Data Science & Machine Learning',
    '- Web Development (Frontend & Backend)',
    '- Educational Content Creation'
  ],
  'projects': [
    'ðŸš€ Featured Projects:',
    '- Data Science Curriculum Development',
    '- Educational Platform Architecture',
    '- Open Source Contributions',
    '',
    'Visit /projects to see more!'
  ],
  'contact': [
    'ðŸ“« Get in touch:',
    '- GitHub: @ramonpzg',
    '- Website: ramonpzg.github.io',
    '- Email: Type "email" to reveal'
  ]
};
---

<div class="terminal-container">
  <div class="terminal">
    <!-- Terminal Header -->
    <div class="terminal-header">
      <div class="terminal-buttons">
        <span class="terminal-button close"></span>
        <span class="terminal-button minimize"></span>
        <span class="terminal-button maximize"></span>
      </div>
      <div class="terminal-title">
        <span class="terminal-user">visitor</span>
        <span class="terminal-at">@</span>
        <span class="terminal-host">ramonpzg</span>
        <span class="terminal-path">~/home</span>
      </div>
    </div>

    <!-- Terminal Content -->
    <div class="terminal-content">
      <!-- Welcome Message -->
      <div class="terminal-welcome">
        <p>Welcome to Ramon's Interactive Terminal! Type 'help' to get started.</p>
      </div>

      <!-- Command History -->
      <div class="terminal-history"></div>

      <!-- Input Line - Now in a fixed container -->
      <div class="terminal-input-container">
        <div class="terminal-input-line">
          <span class="terminal-prompt">
            <span class="user-host">visitor@ramonpzg</span>
            <span class="separator">:</span>
            <span class="path">~/home</span>
            <span class="arrow">â†’</span>
          </span>
          <input 
            type="text" 
            class="terminal-input" 
            spellcheck="false" 
            autofocus 
            aria-label="terminal input"
          />
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .terminal-container {
    width: 100%;
    height: 600px;
    position: relative;
  }

  .terminal {
    width: 100%;
    height: 100%;
    background: rgba(17, 17, 27, 0.99);
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 
      0 0 20px rgba(var(--primary-400), 0.2),
      0 0 40px rgba(var(--primary-400), 0.1);
    border: 1px solid rgba(var(--primary-400), 0.3);
  }

  .terminal-header {
    display: flex;
    align-items: center;
    padding: 1rem;
    background: rgba(var(--background-800), 0.99);
    border-bottom: 1px solid rgba(var(--primary-400), 0.2);
  }

  .terminal-buttons {
    display: flex;
    gap: 0.5rem;
    margin-right: 1rem;
  }

  .terminal-button {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .close { background: #ff5f56; }
  .minimize { background: #ffbd2e; }
  .maximize { background: #27c93f; }

  .terminal-title {
    color: var(--text-300);
    font-size: 0.875rem;
  }

  .terminal-content {
    padding: 1rem;
    height: calc(100% - 3.5rem);
    overflow-y: auto;
    position: relative;
    font-family: 'Menlo', 'Monaco', 'Courier New', monospace;
  }

  .terminal-welcome {
    color: var(--text-300);
    margin-bottom: 1rem;
  }

  .terminal-history {
    margin-bottom: 1rem;
  }

  .terminal-entry {
    margin: 0.25rem 0;
    white-space: pre-wrap;
    line-height: 1.5;
  }

  .terminal-entry.command {
    color: var(--primary-300);
  }

  .terminal-entry.output {
    color: var(--text-200);
  }

  .terminal-entry.error {
    color: #ff5f56;
  }

  .terminal-entry.easter-egg {
    color: var(--accent-400);
  }

  .terminal-input-container {
    position: relative;
    bottom: 0;
    left: 0;
    right: 0;
    background: transparent;
    padding: 0.5rem 0;
    margin-top: auto;
  }

  .terminal-input-line {
    display: flex;
    align-items: center;
  }

  .terminal-prompt {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--text-300);
    margin-right: 0.5rem;
  }

  .terminal-prompt .user-host {
    color: var(--primary-400);
  }

  .terminal-prompt .separator {
    /* color: var(--text-300); */
  }

  .terminal-prompt .path {
    color: var(--accent-400);
  }

  .terminal-prompt .arrow {
    color: var(--secondary-400);
    margin-left: 0.25rem;
  }

  .terminal-input {
    background: transparent;
    border: none;
    color: var(--text-50);
    font-family: 'Menlo', 'Monaco', 'Courier New', monospace;
    font-size: 0.875rem;
    width: 100%;
    outline: none;
    padding: 0;
    margin: 0;
  }

  /* Scrollbar styling */
  .terminal-content::-webkit-scrollbar {
    width: 8px;
  }

  .terminal-content::-webkit-scrollbar-track {
    background: rgba(var(--background-800), 0.5);
  }

  .terminal-content::-webkit-scrollbar-thumb {
    background: rgba(var(--primary-400), 0.3);
    border-radius: 4px;
  }

  .terminal-content::-webkit-scrollbar-thumb:hover {
    background: rgba(var(--primary-400), 0.5);
  }
</style>

<script define:vars={{ commands }}>
  class Terminal {
    constructor() {
      this.input = document.querySelector('.terminal-input');
      this.history = document.querySelector('.terminal-history');
      
      if (!this.input || !this.history) {
        console.error('Terminal elements not found');
        return;
      }

      this.initialize();
    }

    initialize() {
      this.input.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          const command = this.input.value.trim().toLowerCase();
          if (command) {
            this.executeCommand(command);
            this.input.value = '';
          }
        }
      });

      document.querySelector('.terminal').addEventListener('click', () => {
        this.input.focus();
      });
    }

    executeCommand(command) {
      this.addToHistory(`â†’ ${command}`, 'command');

      if (command === 'clear') {
        this.history.innerHTML = '';
        return;
      }

      if (command === 'email') {
        this.addToHistory('Email address hidden for privacy');
        return;
      }

      const output = commands[command];
      
      if (output) {
        output.forEach(line => this.addToHistory(line));
      } else {
        this.addToHistory(
          `Command not found: ${command}. Type "help" for available commands.`,
          'error'
        );
      }
    }

    addToHistory(text, type = 'output') {
      const line = document.createElement('div');
      line.className = `terminal-entry ${type}`;
      line.textContent = text;
      this.history.appendChild(line);
      
      // Scroll to show new content while keeping input visible
      const content = document.querySelector('.terminal-content');
      if (content) {
        content.scrollTop = content.scrollHeight;
      }
    }
  }

  // Initialize terminal when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    new Terminal();
  });
</script>
