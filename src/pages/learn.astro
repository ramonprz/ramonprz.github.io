---
import Layout from '../layouts/Layout.astro';
import LessonCard from '../components/LessonCard.astro';
import TagFilter from '../components/TagFilter.astro';
import Dock from '../components/Dock.astro';
import { getCollection } from 'astro:content';

const learningContent = await getCollection('learn');
const allTags = [...new Set(learningContent.flatMap(content => content.data.topics))];
---

<Layout title="Learning Resources | Ramon Perez">
  <main class="relative min-h-screen pb-24">
    <div class="max-w-3xl mx-auto px-4 py-12">
      <div class="space-y-8 mb-12">
        <h1 class="text-4xl font-bold tracking-tight">
          <span class="text-gradient">Learning Resources</span>
        </h1>
        <p class="text-lg text-text-300">
          Tutorials, guides, and hands-on lessons for programming and data science.
        </p>
      </div>

      <!-- Search and Tag Filter -->
      <div class="mb-8 space-y-4">
        <input 
          type="text" 
          placeholder="Search lessons..." 
          class="w-full bg-background-800/50 border border-text-400/10 rounded-lg px-4 py-2 focus:outline-none focus:border-primary-400/50"
          id="search-input"
        />
        <TagFilter tags={allTags} />
      </div>

      <!-- Learning Content List -->
      <div class="space-y-2" id="content-container">
        {learningContent.map((content) => (
          <LessonCard lesson={content} />
        ))}
      </div>

      <!-- Empty State -->
      <div id="empty-state" class="hidden text-center py-12 text-text-300">
        <p>No matching content found.</p>
      </div>
    </div>

    <!-- Updated Dock positioning -->
    <div class="fixed bottom-0 left-0 right-0 z-30 flex justify-center pb-4">
      <Dock />
    </div>
  </main>
</Layout>

<script>
  class ContentFilter {
    declare private selectedTags: Set<string>;
    declare private searchInput: HTMLInputElement;
    declare private contentCards: NodeListOf<Element>;
    declare private emptyState: HTMLElement | null;
    declare private tagButtons: NodeListOf<Element>;

    constructor() {
      this.selectedTags = new Set();
      this.searchInput = document.getElementById('search-input') as HTMLInputElement;
      this.contentCards = document.querySelectorAll('.lesson-card');
      this.emptyState = document.getElementById('empty-state');
      this.tagButtons = document.querySelectorAll('.filter-button');
      
      this.initialize();
    }

    initialize() {
      // Initialize tag buttons
      this.tagButtons.forEach(button => {
        button.addEventListener('click', () => {
          const tag = button.getAttribute('data-tag');
          if (!tag) return;

          // Handle "All Posts" button
          if (tag === 'all') {
            this.selectedTags.clear();
            this.tagButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
          } else {
            // Remove "All Posts" selection if other tag is clicked
            const allButton = document.querySelector('[data-tag="all"]');
            allButton?.classList.remove('active');

            // Toggle tag selection
            button.classList.toggle('active');
            if (this.selectedTags.has(tag)) {
              this.selectedTags.delete(tag);
            } else {
              this.selectedTags.add(tag);
            }
          }

          this.updateVisibility();
        });
      });

      // Initialize search
      this.searchInput?.addEventListener('input', () => this.updateVisibility());
    }

    updateVisibility() {
      const searchTerm = this.searchInput?.value.toLowerCase() || '';
      let visibleCount = 0;

      this.contentCards.forEach(card => {
        const text = card.textContent?.toLowerCase() || '';
        const cardTags = new Set((card.getAttribute('data-tags') || '').split(','));
        
        const matchesSearch = text.includes(searchTerm);
        const matchesTags = this.selectedTags.size === 0 || 
          Array.from(this.selectedTags).every(tag => cardTags.has(tag));

        const isVisible = matchesSearch && matchesTags;
        card.classList.toggle('hidden', !isVisible);
        if (isVisible) visibleCount++;
      });

      // Show/hide empty state
      if (this.emptyState) {
        this.emptyState.classList.toggle('hidden', visibleCount > 0);
      }
    }
  }

  // Initialize filter when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    new ContentFilter();
  });
</script>

<style>
  .text-gradient {
    background: linear-gradient(45deg, var(--primary-400), var(--accent-400));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
</style>
